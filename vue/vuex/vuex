Vuex 解决了多个视图依赖于同一状态和来自不同视图的行为需要变更同一状态的问题，
将开发者的精力聚焦于数据的更新而不是数据在组件之间的传递上.

1.2 Vuex各个模块
（1）state：用于数据的存储，是store中的唯一数据源
// 定义
new Vuex.Store({
    state: {
        allProducts: []
    }
    //...
})
// 组件中获取
this.$store.state.allProducts
（2）getters：如vue中的计算属性一样，基于state数据的二次包装，常用于数据的筛选和多个数据的相关性计算// 定义
getters: {
    cartProducts(state, getters, rootState) 
        => (getters.allProducts.filter(p => p.quantity))
}
// 组件中获取
this.$store.getters.cartProducts
（3）mutations：类似函数，改变state数据的唯一途径，且不能用于处理异步事件（重点！！！）

// 定义
mutations: {
    setProducts (state, products) {
        state.allProducts = products
    }
}

// 组件中使用
this.$store.commit('setProducts', {//..options})
4）actions：类似于mutation，用于提交mutation来改变状态，而不直接变更状态，可以包含任意异步操作

// 定义（shop为api）
actions: {
    getAllProducts ({ commit }, payload) {
        shop.getProducts((res) => {
            commit('setProducts', res)
        })
    }
}

// 组件中使用
this.$store.dispatch('getAllProducts', {//..payload})
（5）modules：类似于命名空间，用于项目中将各个模块的状态分开定义和操作，便于维护
// 定义
const moduleA = {
    state: { ... },
    mutations: { ... },
    actions: { ... },
    getters: { ... }
}

const moduleB = {
    state: { ... },
    mutations: { ... },
    actions: { ... }
}

const store = new Vuex.Store({
    modules: {
        a: moduleA,
        b: moduleB
    }
})

// 组件中使用
store.state.a // -> moduleA 的状态
store.state.b // -> moduleB 的状态