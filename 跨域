1、script标签jsonp跨域
2、nginx反向代理
3、node.js中间件代理跨域
我们以 www.v2ex.com/api 接口为例，这个接口的响应头没有Access-Control-Allow-Origin字段，所以正常使用axios调用此类接口，虽然可以访问到数据，但是axios本身的跨域错误机制，导致我们无法使用其返回的数据。express登场了，我们将使用它来实现接口转发实现跨域。首先我们准备一个路由文件config/proxy.js：

module.exports = {
    '/api/now': 'https://www.v2ex.com/api/topics/latest.json',
    '/api/hot': 'https://www.v2ex.com/api/topics/hot.json',
    '/api/node': 'https://www.v2ex.com/api/nodes/show.json',
    '/api/userinfo': 'https://www.v2ex.com/api/members/show.json',
    '/api/replies': 'https://www.v2ex.com/api/replies/show.json',
    '/api/topics': 'https://www.v2ex.com/api/topics/show.json'
}
这里我重新定义了接口的名称，你可以把他任意定为你想要的名字。接下来准备一个server.js，也就是我们服务端的主文件：

const express = require('express')
const path = require('path')
const axios = require('axios')
const app = express()
// 引入第三方路由
const proxyConf = require('./config/proxy')
const headerConf = {
    referer: 'https://www.v2ex.com',
    host: 'www.v2ex.com'
}

let apiRoutes = express.Router()

for (let k in proxyConf) {
    app.get(k, function(req, res) {
        axios.get(proxyConf[k], {
            headers: headerConf,
            params: req.query
        }).then(response => {
            res.setHeader('Access-Control-Allow-Origin', '*')
            res.json(response.data)
        }).catch(e => {
            console.log(e)
        })
    })
}

app.use('/', apiRoutes)
app.use(express.static(path.join(__dirname, 'dist')))

const port = process.env.PORT || 5000
app.listen(port)
console.log('server started ' + port)
执行node server.js

这里关键代码为res.setHeader('Access-Control-Allow-Origin', '*')，我们主动给这个简单的http服务器的响应头设置了允许跨域访问，所以你可以通过axios调用http://127.0.0.1:5000/api/now等接口而不会出现跨域报错的问题。
在 res.json(response.data)这个操作之前，我们可以根据请求消息req处理返回消息response.data，比如分页，达到我们想要返回的数据的目的。这样我们就模拟了一个反向代理服务器。^-^

4、后端在头部信息设置安全域名

5、后端在服务器上设置cors