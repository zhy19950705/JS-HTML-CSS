1、事件捕获阶段，事件从window开始一层一层向目标传递
2、目标阶段，当事件到底事件发生现场
3、事件冒泡阶段，和事件捕获阶段相反，事件从目标到window传递的阶段

事件委托、代理
事件有冒泡机制，可以不再目标元素监听事件，而在他的父元素监听。提高性能，动态自适应。
比如无序列表点击事件，监听绑定在父元素 if(event.target==li)

// HTML
<div id="parent" onclick="parentCB(window.event)">
    <div id="child" onclick="childCB(window.event)"></div>
</div>

//SCRIPT
var phases = {
  1: 'capture',
  2: 'target',
  3: 'bubble'
};

function parentCB(e){
    console.log('parent dom0 html ' + phases[e.eventPhase] );
}

function childCB(e){
    console.log('child dom0 html ' + phases[e.eventPhase] );
}

var parent = document.getElementById('parent');
parent.addEventListener('click', function(e){
    console.log('parent capture ' + phases[e.eventPhase]);
}, true)
parent.onclick = function(e){
    console.log('parent dom0 js ' + phases[e.eventPhase]);
}
parent.addEventListener('click', function(e){
    console.log('parent bubble ' + phases[e.eventPhase]);
})

var child = document.getElementById('child');
child.addEventListener('click', function(e){
    console.log('child bubble ' + phases[e.eventPhase]);
})
child.addEventListener('click', function(e){
    console.log('child capture ' + phases[e.eventPhase]);
}, true)

// child.onclick = function(e){
//     console.log('child dom0 js ' + phases[e.eventPhase]);
// } 

1、当html中有onclick事件，js中也有onclick事件时，js会覆盖html中的，因为他们其实是同一个属性
2、目标元素的事件执行顺序和定义顺序一致，不会按照先捕获后冒泡的顺序。在html中定义的事件排在第一位
3、非目标事件的函数执行遵守先捕获后冒泡DOM0级元素定义的事件会在冒泡阶段先执行，不管是在html还是js中定义

//HTML 
<a href="#"  onclick ="go(this)"> hhhhhh </a>
<button> 按钮 </button>

//SCRIPT
function go(e){
     console.log(e);  // <a href="#"  onclick ="go(this)"> hhhhhh </a>
     console.log(this); //window
}

var bt = document.getElementsByTagName('button')[0];
bt.onclick = function(e){
    console.log(this); // <button> 按钮 </button>
} 

而attachEvent中的this指向window，addEventListener指向当前的元素。


事件的机制抽象出来就是发布订阅模式。可以利用自定义事件去实现想要的发布订阅模式

//新建事件实例
var event=new Event('build');

//添加监听函数
child.addEventListener('build',function(e){
    console.log('')
})

//触发事件
child.dispatchEvent('build')